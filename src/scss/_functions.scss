//**********************************************************
// Functions
//----------------------------------------------------------
//
//**********************************************************
@use "sass:math";
@use "sass:list";

// Locator
//----------------------------------------------------------
// ".%" or "%." - class & placeholder
// "#"          - id
// "."          - class
// "%"          - placeholder
// ""           - without locator
//**********************************************************
@function JX($selector, $loc: $locator) {
    @if $loc == ".%" or $loc == "%." {
        $list: ();

        @each $value in (".", "%") {
            //@if $value == "%" {
            //    $placeholder: #{$value}#{$prefix}#{$selector};
            //
            //    $list_placeholders: PushPlaceholder($placeholder);
            //}

            $list: list.append($list, #{$value}#{$prefix}#{$selector}, comma);
        }

        @return $list;
    } @else if $loc == "." or $loc == "%" or $loc == "#" or $loc == "" {
        @return #{$loc}#{$prefix}#{$selector};
    }

    @warn "Wrong locator: #{$loc}";
    @return null;
}

// Placeholders
//@function HasPlaceholder($placeholder) {
//    @if list.index($list_placeholders, $placeholder) == null {
//        @return false;
//    }
//
//    @warn "The object already exists: #{$placeholder}";
//    @return true;
//}

//@function PushPlaceholder($placeholder) {
//    @if not HasPlaceholder($placeholder) {
//        @return list.append($list_placeholders, $placeholder);
//    }
//
//    @return null;
//}

// Tile
@function GetMinTileWidth($n) {
    $c: math.div($grid_width, $n);
    $d: $c;

    //$a: $n - 1;
    //$b: $grid_width - $a * $grid_gap;
    //$c: math.div($b, $n);
    //$d: $c * $a;

    //@if math.unit($d) == "px" {
    //    $d: math.round(math.div($d, $n)) + 1;
    //} @else if math.unit($d) == "rem" {
    //    $d: math.div($d, $n) + $px;
    //}

    @return $d;
}

// Breakpoints
@function GetListBreakpoints($is_evenly: false) {
    $list: ();
    $g: $grid_gap;
    $c: $container_gap * 2;
    $r: $container_rate * $c;
    $f: $container_rate * $g;
    $v: $c;

    @for $i from 1 through $grid_column {
        $w: $i * $grid_cell_width;
        $d: $i - 1;

        @if not $is_evenly {
            $p: math.div($w + $d * $grid_gap + $v, 100);
            $gg: $p * $f;
            $cg: $p * $r;
        }

        $b: $w + $d * $g + $c;

        @if math.unit($b) == "px" {
            $b: math.round($b) - 1;
        } @else if math.unit($b) == "rem" {
            $b: $b - $px;
        }

        $list: list.append($list, $b);
    }

    @return $list;
}

@function GetBreakpoint($n: $grid_column) {
    @return list.nth($list_breakpoints, $n);
}

// Helpers
@function StripUnit($value) {
    @return math.div($value, ($value * 0 + 1));
}

@function PxToRem($value) {
    @if math.unit($value) == "px" {
        @return $px * StripUnit($value);
    }

    @return $value;
}

@function RemToPx($value) {
    @if math.unit($value) == "rem" {
        @return math.round($root_unit * StripUnit($value));
    }

    @return $value;
}

//@function ToLayoutUnit($value) {
//    @if math.unit($container_width) == "px" {
//
//    }
//
//    @return $value;
//}