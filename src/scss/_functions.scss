//**********************************************************
// Functions
//----------------------------------------------------------
//
//**********************************************************
@use "sass:math";
@use "sass:list";

// Grid
@function GetMinShrinkCellWidth() {
    $a: $grid_width - ($grid_column - 1) * $grid_gap;
    $b: math.div($a, $grid_column);

    @return math.div($a - $b + 1, $grid_column);
}
//@function GetGridCellWidth() {
//    @return math.round(math.div($grid_width - ($grid_column - 1) * $grid_gap, $grid_column));
//}

// Breakpoints
@function GetListBreakpoints() {
    $list: [];
    $b: math.div(100, $layout_width) * $grid_gap * 2;
    $g: 100 - $b;

    @for $i from 1 through $grid_column {
        $w: $i * $grid_col_width;
        $s: math.div($w, $g) * $b;
        $d: math.round($w + $s) - if(math.unit($w) == "rem", $px, 1);
        $list: list.append($list, $d);
    }

    @return $list;
}

@function GetBreakpoint($n: $grid_column) {
    @return list.nth($list_breakpoints, $n);
}

// Helpers
@function StripUnit($value) {
    @return math.div($value, ($value * 0 + 1));
}

@function PxToRem($value) {
    @if math.unit($value) == "px" {
        @return $px * StripUnit($value);
    }

    @debug "Unit is not px";
    @return $value;

}

@function RemToPx($value) {
    @if math.unit($value) == "rem" {
        @return math.round($root_cell * StripUnit($value));
    }

    @debug "Unit is not rem";
    @return $value;
}