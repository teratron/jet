//**********************************************************
// Functions
//----------------------------------------------------------
//
//**********************************************************
@use "sass:math";
@use "sass:list";

// Grid
@function GetGridCellWidth() {
    @return math.div($grid_width - ($grid_column - 1) * $grid_gap, $grid_column);
}

@function GetMinShrinkCellWidth($n: $grid_column) {
    $w: GetBreakpoint($n - 1);

    @if math.unit($w) == "px" {
        $w: $w + 2;
    } @else if math.unit($w) == "rem" {
        $w: $w + 2 * $px;
    }

    $a: math.div($w, 100);
    $b: math.div(100, $layout_width) * $grid_gap * ($n + 1); // all gap %
    $c: $w - $a * $b; // all cell px

    @return math.div($c, $n);
}

// Breakpoints
@function GetListBreakpoints() {
    $list: [];
    $c: GetGridCellWidth();
    $g: math.div(100, $layout_width) * $grid_gap;
    $f: 100 - $g * ($grid_column + 1);

    @for $i from 1 through $grid_column {
        $w: $i * $c;
        $s: math.div($w, $f);
        $d: $w + ($i + 1) * $g * $s;

        @if math.unit($d) == "px" {
            $d: math.round($d) - 1;
        } @else if math.unit($d) == "rem" {
            $d: $d - $px;
        }

        $list: list.append($list, $d);
    }

    @return $list;
}

@function GetBreakpoint($n: $grid_column) {
    @return list.nth($list_breakpoints, $n);
}

// Helpers
@function StripUnit($value) {
    @return math.div($value, ($value * 0 + 1));
}

@function PxToRem($value) {
    @if math.unit($value) == "px" {
        @return $px * StripUnit($value);
    }

    @debug "Unit is not px";
    @return $value;

}

@function RemToPx($value) {
    @if math.unit($value) == "rem" {
        @return math.round($root_cell * StripUnit($value));
    }

    @debug "Unit is not rem";
    @return $value;
}