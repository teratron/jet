//**********************************************************
// Mixins
//----------------------------------------------------------
//
//**********************************************************
@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:meta";

@mixin setPlaceholder($selector, $props: null, $loc: "%") {
    @each $sel in $selector {
        #{JX($sel, $loc)} {
            @if meta.type-of($selector) == list {
                @content($sel);
            } @else {
                @content;
            }

            @if $props != null {
                @if meta.type-of($props) == map {
                    @each $key, $value in $props {
                        @if $value > 0 {
                            #{$key}: $value;
                        }
                    }
                }
            }
        }
    }
}

@mixin setGutter($prop, $value) {
    @include setPropsAdaptive(($prop: $value));

    &-half {
        @include setPropsAdaptive(($prop: math.div($value, 2)));
    }

    &-quart {
        @include setPropsAdaptive(($prop: math.div($value, 4)));
    }

    &-0 {
        #{$prop}: 0;
    }
}

@mixin setPropsAdaptive($props) {
    @each $key, $value in $props {
        @if $value > 0 {
            #{$key}: $value;
        }
    }

    $buffer: ();

    @each $key, $value in $props {
        @if $value > 0 {
            $buffer: map.merge($buffer, ($key: 1vw * $container_rate * $value));
        } @else {
            $buffer: map.merge($buffer, ($key: 0));
        }
    }

    @include copyBuffer(#{&}, $buffer);
}

// Array of breakpoints buffer
//----------------------------------------------------------
// $list_breakpoints_buffer: [
//     (
//         breakpoint: 11,
//         selector: &,
//         props: (
//             padding-left: 1rem,
//             padding-right: 1rem
//         )
//     ),
//     ...
// ]
//**********************************************************
@mixin copyBuffer($selector, $props, $breakpoint: $grid_column) {
    $buffer:                  (selector: $selector, breakpoint: $breakpoint);

    @each $key, $value in $props {
        $buffer: map.merge($buffer, props, ($key: $value));
    }

    $list_breakpoints_buffer: list.append($list_breakpoints_buffer, $buffer) !global;
}

@mixin pasteBuffer($breakpoint: $grid_column) {
    @each $buffer in $list_breakpoints_buffer {
        @if $breakpoint == map.get($buffer, breakpoint) {
            $selector: map.get($buffer, selector);

            #{$selector} {
                @each $key, $value in map.get($buffer, props) {
                    #{$key}: $value;
                }
            }
        }
    }
}

//@mixin pushBuffer($selector, $props, $breakpoint: $grid_column) {
//    $buffer: (selector: $selector, breakpoint: $breakpoint);
//    @content;
//}