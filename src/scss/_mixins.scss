//**********************************************************
// Mixins
//----------------------------------------------------------
//
//**********************************************************

@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:string";
@use "sass:selector";

//@mixin setPlaceholderBreakpoints($name) {
//    @at-root {
//        @for $i from $grid_column to 0 {
//            @media only screen and (max-width: getBreakpoint($i)) {
//                %#{$name}-breakpoint-#{$i} {
//                    @content;
//                }
//            }
//        }
//    }
//}

// Helpers
@mixin setPlaceholderGutter($prop) {
    %#{$prop} {
        @include setPropsAdaptive((
                #{$prop}: $grid_gap
        ));

        &-half {
            @include setPropsAdaptive((
                    #{$prop}: $grid_gap_half
            ));
        }

        &-0 {
            #{$prop}: 0;
        }

        @each $side in $list_sides {
            &-#{$side} {
                @include setPropsAdaptive((
                        #{$prop}-#{$side}: $grid_gap
                ));

                &-half {
                    @include setPropsAdaptive((
                            #{$prop}-#{$side}: $grid_gap_half
                    ));
                }

                &-0 {
                    #{$prop}-#{$side}: 0;
                }
            }
        }
    }
}

//@mixin addPlaceholder($name) {
//    //@if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//    //    $name: string.slice(#{$name}, 2);
//    //}
//
//    //@if list.index($breakpoint_placeholders, #{$name}) == null {
//    //    $breakpoint_placeholders: list.append($breakpoint_placeholders, #{$name}) !global;
//    //} @else {
//    //    @warn "Placeholder %#{$name} already exists.";
//    //}
//
//    @if list.index($breakpoint_placeholders, $name) == null {
//        $breakpoint_placeholders: list.append($breakpoint_placeholders, $name) !global;
//    } @else {
//        @warn "Placeholder %#{$name} already exists.";
//    }
//}

//@mixin extendPlaceholder($name) {
//    @if list.index($breakpoint_placeholders, #{$name}) == null {
//        @include addPlaceholder($name);
//    }
//
//    @if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//        $name: string.slice(#{$name}, 2);
//    }
//
//    $selector: selector.parse($name);
//
//    @extend %#{$selector} !optional;
//}

//@mixin makePlaceholder($name) {
//    @if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//        $name: string.slice(#{$name}, 2);
//    }
//
//    $selector: selector.parse($name);
//
//    %#{$selector} {
//        @content;
//    }
//}

@mixin setPropsAdaptive($props) {
    @each $key, $value in $props {
        @if $value > 0 {
            #{$key}: $value;
        }
    }

    $map: (selector: #{&});


    @media only screen and (max-width: getBreakpoint($grid_column)) {
        @each $key, $value in $props {
            @if $value > 0 {
                #{$key}: $layout_rate * $value;
                $map: map.merge($map, props, (#{$key}: $layout_rate * $value));
            } @else {
                #{$key}: 0;
                $map: map.merge($map, props, (#{$key}: 0));
            }
        }
    }

    $global_map: list.append($global_map, $map) !global;

    //:root {
    //        //--var7: #{$global_map};
    //    }
    //@include makePlaceholder(&) {
    //    @each $key, $value in $props {
    //        @if $value > 0 {
    //            #{$key}: $layout_rate * $value;
    //        } @else {
    //            #{$key}: 0;
    //        }
    //    }
    //}

    //@include extendPlaceholder(&);
    //@include addPlaceholder(&);
    //@extend #{&} !optional;
}
@mixin expand() {
    @each $g in $global_map {
        $selector: map.get($g, selector);
        #{$selector} {
            @each $key, $value in map.get($g, props) {
                    #{$key}: $value;

            }
        }
    }
}
@mixin respond-to($id) {
    @media only screen and (max-width: getBreakpoint($id)) {
        @content;
    }
}

// Utilities

// Components

// Skins

// Layout
