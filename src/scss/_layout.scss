// @import "layout/grid";
// @import "layout/column";
// @import "layout/tile";

// Layout
.layout {
    width:        100%;
    max-width:    $layout_width;
    margin-left:  auto;
    margin-right: auto;

    @include setPropsAdaptive((
            padding-left: $layout_gap,
            padding-right: $layout_gap,
    ));
}

// Grid
.grid {
    display:        grid;
    grid-auto-rows: minmax($grid_cell_height, auto);
}

%grid {
    @extend .grid;
    grid-auto-flow: dense;

    @include setPropsAdaptive((
            grid-gap: $grid_gap,
    ));
}

.row {
    @extend .grid;
    grid-template-columns: repeat(auto-fit, minmax($grid_cell_height, auto));
    grid-auto-flow:        column;
}

.col,
%col {
    width:     auto;
    max-width: none;
}

@for $i from 1 through $grid_column {
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
        @extend %grid;
    }

    .col-#{$i},
    .grid-#{$i},
    .grid-#{$i} > .col,
    .grid-#{$i} > .row {
        grid-column-end: span $i;
    }

    .col-#{$i} {
        @extend %col;
    }

    .span-#{$i} {
        grid-column-start: $i;
    }
}

.list {
    @extend .grid;
    grid-template-rows: repeat(auto-fill, minmax($grid_cell_height, auto));
    grid-auto-flow:     row;
}

// Shrink
@for $i from $grid_column to 1 {
    $k: $i - 1;

    @media only screen and (max-width: getBreakpoint($k)) {
        .shrink {
            &,
            > %grid-#{$i} {
                grid-template-columns: repeat($k, 1fr);
            }

            > %col-#{$i},
            > .grid-#{$i} > .col,
            > .grid-#{$i} > .row {
                grid-column-end: span $k;
            }
        }

        @for $j from $i through $grid_column {
            .col-#{$j},
            .grid-#{$j} {
                @extend %col-#{$i};
                @extend %grid-#{$i};
            }
        }
    }
}
