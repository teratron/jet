//**********************************************************
// Layout
//----------------------------------------------------------
// %layout
//**********************************************************

#{JX(layout, "%")} {
    @extend #{JX(display-grid, "%")};
    grid-auto-rows: minmax($layout_unit, auto);
}

// Container
//----------------------------------------------------------
// .%container
//**********************************************************
#{JX(container)} {
    width:        100%;
    max-width:    $container_width;
    margin-right: auto;
    margin-left:  auto;

    @if $container_gap > 0 {
        //@extend #{JX(padding-left, "%")}, #{JX(padding-right, "%")};
        @include setPropsAdaptive((
                padding-left: $container_gap,
                padding-right: $container_gap
        ));
    }
}

// Grid
//----------------------------------------------------------
// .%grid
// .%grid-[1...n]
// .%grid-b[1...n]-[1...n]
//**********************************************************
#{JX(grid)}, [class*=#{JX(grid-, "")}] {
    @extend #{JX(layout, "%")};
    grid-auto-flow: row;
    //align-items:    baseline;

    @if $grid_gap > 0 {
        @extend #{JX(gap, "%")};
    }
}

#{JX(grid-child-fit, "%")} {
    @extend #{JX(reset-width, "%")};
    @extend #{JX(margin-0, "%")};
}

// Row
//----------------------------------------------------------
// .%row
//**********************************************************
#{JX(row)} {
    @extend #{JX(layout, "%")};
    grid-template-columns: repeat(auto-fit, minmax($layout_unit, auto));
    grid-auto-flow:        column;
}

// Bar
//----------------------------------------------------------
// .%bar
//**********************************************************
#{JX(bar)} {
    //@extend %#{$prefix}row;
    @extend #{JX(layout, "%")};
    grid-auto-flow:    column;
    grid-auto-columns: min-content;
    align-items:       center;
    justify-items:     center;
}

// Column
//----------------------------------------------------------
// .%col
// .%col-[1...n]
// .%col-b[1...n]-[1...n]
//**********************************************************
#{JX(col)} {
    @extend #{JX(layout, "%")};
    grid-template-rows: repeat(auto-fit, minmax($layout_unit, auto));
    grid-auto-flow:     dense;
}

// List
//----------------------------------------------------------
// .%list
//**********************************************************
#{JX(list)} {
    @extend #{JX(col, "%")};
}

// Shrink
//----------------------------------------------------------
// .%shrink
//**********************************************************
#{JX(shrink)} {
    grid-auto-flow: dense;
}

// Gap
//----------------------------------------------------------
// .%gap-200
// .%gap-150
// .%gap-100  .%gap
// .%gap-50   .%gap-half
// .%gap-25   .%gap-quart
// .%gap-0
//**********************************************************
#{JX(gap)} {
    @extend #{JX(gap, "%")};

    &-half {
        @extend #{JX(gap-half, "%")};
    }

    &-quart {
        @extend #{JX(gap-quart, "%")};
    }

    &-0 {
        @extend #{JX(gap-0, "%")};
    }
}

// Checkpoints
//----------------------------------------------------------
// .%grid-[1...n]
// .%tile-[1...n]
// .%col-[1...n]
// .%span-[1...n]
// .%order-[1...n]
//**********************************************************
@for $i from 1 through $grid_column {
    @for $j from 1 through $grid_column {
        #{JX(grid-b#{$i}-#{$j}, "%")} {
            @extend #{JX(grid, "%")};
        }
    }

    #{JX(grid-#{$i}, "%")} {
        @extend #{JX(grid, "%")};
    }

    #{JX(grid-#{$i})} {
        grid-template-columns: repeat($i, 1fr);
    }

    #{JX(col-#{$i})},
    #{JX(grid-#{$i})},
    #{JX(grid-#{$i})} > #{JX(grid-child-fit, "%")} {
        grid-column-end: span $i;
    }

    #{JX(span-#{$i})} {
        grid-column-start: $i;
    }

    #{JX(order-#{$i})} {
        order: $i;
    }

    //@if not $is_grid_gap {
    #{JX(tile-#{$i})} {
        @extend #{JX(layout, "%")};
        grid-template-columns: repeat(auto-fit, minmax(GetMinTileWidth($i), 1fr));
        //grid-template-columns: repeat(auto-fit, minmax(270px, 1fr)) !important;
    }
    //}
}

// Breakpoints
//----------------------------------------------------------
// .%shrink
// .%grid-b[1...n]-[1...n]
// .%col-b[1...n]-[1...n]
// .%span-b[1...n]-[1...n]
// .%order-b[1...n]-[1...n]
// .%on-b[1...n]
// .%off-b[1...n]
// .%show-b[1...n]
// .%hide-b[1...n]
//**********************************************************
@for $i from $grid_column to 0 {
    @media only screen and (max-width: GetBreakpoint($i)) {
        @include pasteBuffer($i);

        @for $j from 1 through $grid_column {
            #{JX(grid-b#{$i}-#{$j})} {
                grid-template-columns: repeat($j, 1fr);
            }

            #{JX(col-b#{$i}-#{$j})},
            #{JX(grid-b#{$i}-#{$j})},
            #{JX(grid-b#{$i}-#{$j})} > #{JX(grid-child-fit, "%")} {
                grid-column-end: span $j;
            }

            #{JX(span-b#{$i}-#{$j})} {
                grid-column-start: $j;
            }

            #{JX(order-b#{$i}-#{$j})} {
                order: $j;
            }
        }

        // Shrink
        @if $i < $grid_column {
            $k: $i + 1;

            #{JX(shrink)} {
                &,
                > #{JX(grid-shrink-#{$k}, "%")} {
                    grid-template-columns: repeat($i, 1fr);
                }

                > #{JX(col-shrink-#{$k}, "%")},
                > #{JX(grid-child-fit, "%")} {
                    grid-column-end: span $i;
                }
            }

            @for $j from $k through $grid_column {
                #{JX(grid-#{$j})},
                #{JX(grid-b#{$i}-#{$j})} {
                    @extend #{JX(grid-shrink-#{$k}, "%")};
                }

                #{JX(col-#{$j})},
                #{JX(col-b#{$i}-#{$j})},
                #{JX(grid-#{$j})},
                #{JX(grid-b#{$i}-#{$j})} {
                    @extend #{JX(col-shrink-#{$k}, "%")};
                }
            }
        }

        #{JX(out-b#{$i})} {
            position: fixed;
        }

        #{JX(in-b#{$i})} {
            position: initial;
        }

        #{JX(off-b#{$i})} {
            @include off;
        }

        #{JX(on-b#{$i})} {
            @include on;
        }

        #{JX(hide-b#{$i})} {
            @include hide;
        }

        #{JX(show-b#{$i})} {
            @include show;
        }
    }
}
