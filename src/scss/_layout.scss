//**********************************************************
// Layout
//----------------------------------------------------------
//
//**********************************************************
//@import "mixins/bar";
//@import "mixins/list";

// Grid
//----------------------------------------------------------
// .grid
//**********************************************************
%#{$prefix}grid-init {
    @extend %#{$prefix}display-grid;
    grid-auto-rows: minmax($cell_width, auto);
}

%#{$prefix}grid,
.#{$prefix}grid {
    @extend %#{$prefix}grid-init;
    @extend %#{$prefix}grid-gap;
    grid-auto-flow: row;
    align-items:    baseline;
}

%#{$prefix}grid-child-fit {
    @extend %#{$prefix}reset-width;

    :first-child > & {
        @extend %#{$prefix}margin-top-0;
    }

    :only-child > &,
    :last-child > & {
        @extend %#{$prefix}margin-bottom-0;
    }
}

// Gap
//----------------------------------------------------------
// .gap
// .gap-half
// .gap-0
//**********************************************************
%#{$prefix}gap,
.#{$prefix}gap {
    @extend %#{$prefix}grid-gap;
}

// Row
//----------------------------------------------------------
// .row
//**********************************************************
%#{$prefix}row,
.#{$prefix}row {
    @extend %#{$prefix}grid-init;
    grid-template-columns: repeat(auto-fit, minmax($cell_width, auto));
    grid-auto-flow:        column;
    //@extend %#{$prefix}grid-child-fit;
}

// Bar
//----------------------------------------------------------
// .bar
//**********************************************************
%#{$prefix}bar,
.#{$prefix}bar {
    @extend %#{$prefix}row;
}

// Column
//----------------------------------------------------------
// .col
//**********************************************************
%#{$prefix}col,
.#{$prefix}col {
    @extend %#{$prefix}grid-init;
    grid-template-rows: repeat(auto-fit, minmax($cell_width, auto));
    grid-auto-flow:     dense;
    //@extend %#{$prefix}grid-child-fit;
}

// List
//----------------------------------------------------------
// .list
//**********************************************************
%#{$prefix}list,
.#{$prefix}list {
    @extend %#{$prefix}col;
}

// Checkpoints
//----------------------------------------------------------
// .grid-[1...n]
// .col-[1...n]
// .span-[1...n]
// .order-[1...n]
//**********************************************************
@for $i from 1 through $grid_column {
    %#{$prefix}grid-#{$i},
    .#{$prefix}grid-#{$i} {
        @extend .#{$prefix}grid;
    }

    %#{$prefix}col-#{$i},
    .#{$prefix}col-#{$i},
    %#{$prefix}grid-#{$i},
    .#{$prefix}grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);

        &, > %#{$prefix}grid-child-fit {
            grid-column-end: span $i;
        }
    }

    %#{$prefix}span-#{$i},
    .#{$prefix}span-#{$i} {
        grid-column-start: $i;
    }

    %#{$prefix}order-#{$i},
    .#{$prefix}order-#{$i} {
        order: $i;
    }
}

// Shrink
//----------------------------------------------------------
// .shrink
//**********************************************************
@if not $is_grid_gap {
    %#{$prefix}shrink,
    .#{$prefix}shrink {
        grid-template-columns: repeat(auto-fit, minmax(GetMinShrinkCellWidth(), 1fr));
    }
}

// Container
//----------------------------------------------------------
// .container
//**********************************************************
%#{$prefix}container,
.#{$prefix}container {
    width:        100%;
    max-width:    $layout_width;
    margin-left:  auto;
    margin-right: auto;
    @extend %#{$prefix}padding-left, %#{$prefix}padding-right;
}

// Breakpoints
//----------------------------------------------------------
// .col-b[1...n]-0
// .col-b[1...n]-[1...n]
// .span-b[1...n]-[1...n]
// .order-b[1...n]-[1...n]
//**********************************************************
@for $i from $grid_column to 0 {
    @media only screen and (max-width: GetBreakpoint($i)) {
        @include pasteBuffer($i);

        //.#{$prefix}gap-b#{$i} {
        //    grid-gap: inherit;
        //}
        //
        //.#{$prefix}gap-b#{$i}-0 {
        //    grid-gap: 0;
        //}

        @for $j from 1 through $grid_column {
            .#{$prefix}col-b#{$i}-#{$j} {
                grid-template-columns: repeat($j, 1fr);
            }

            .#{$prefix}col-b#{$i}-#{$j} {
                &, > %#{$prefix}grid-child-fit {
                    grid-column-end: span $j;
                }
            }

            .#{$prefix}span-b#{$i}-#{$j} {
                grid-column-start: $j;
            }

            .#{$prefix}order-b#{$i}-#{$j} {
                order: $j;
            }
        }

        @if $is_grid_gap and $i > 1 {
            %#{$prefix}shrink,
            .#{$prefix}shrink {
                grid-template-columns: repeat(auto-fit, minmax(GetMinShrinkCellWidth($i), 1fr));
            }
        }
    }
}
