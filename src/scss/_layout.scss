//**********************************************************
// Layout
//----------------------------------------------------------
// %layout
// .%container
//**********************************************************
//@import "mixins/bar";
//@import "mixins/list";

#{JX(layout, "%")} {
    @extend %#{$prefix}display-grid;
    grid-auto-rows: minmax($cell_width, auto);
}

// Grid
//----------------------------------------------------------
// .grid
// .grid-[1...n]
// .grid-b[1...n]-[1...n]
//**********************************************************
//[class*=#{$prefix}grid]
#{JX(grid)} {
    @extend #{JX(layout, "%")};
    grid-auto-flow: row;
    //align-items:    baseline;

    @if $is_grid_gap {
        @extend %#{$prefix}grid-gap;
    }
}

%#{$prefix}grid-child-fit {
    @extend %#{$prefix}reset-width;
    @extend %#{$prefix}margin-0;
}

// Row
//----------------------------------------------------------
// .row
//**********************************************************
#{JX(row)} {
    @extend #{JX(layout, "%")};
    grid-template-columns: repeat(auto-fit, minmax($cell_width, auto));
    grid-auto-flow:        column;
}

// Bar
//----------------------------------------------------------
// .%bar
//**********************************************************
#{JX(bar)} {
    //@extend %#{$prefix}row;
    @extend #{JX(layout, "%")};
    grid-auto-flow:    column;
    grid-auto-columns: min-content;
    align-items:       center;
    justify-items:     center;
}

// Column
//----------------------------------------------------------
// .%col
// .%col-[1...n]
// .%col-b[1...n]-[1...n]
//**********************************************************
#{JX(col)} {
    @extend #{JX(layout, "%")};
    grid-template-rows: repeat(auto-fit, minmax($cell_width, auto));
    grid-auto-flow:     dense;
}

// List
//----------------------------------------------------------
// .%list
//**********************************************************
#{JX(list)} {
    @extend %#{$prefix}col;
}

// Shrink
//----------------------------------------------------------
// .%shrink
//**********************************************************
#{JX(shrink)} {
    grid-auto-flow: dense;
}

// Container
//----------------------------------------------------------
// .%container
//**********************************************************
#{JX(container)} {
    width:        100%;
    max-width:    $layout_width;
    margin-right: auto;
    margin-left:  auto;
    @extend #{JX(padding-left, "%")}, #{JX(padding-right, "%")};
}

// Gap
//----------------------------------------------------------
// .%gap
// .%gap-half
// .%gap-quart
// .%gap-0
//**********************************************************
#{JX(gap)} {
    @extend %#{$prefix}grid-gap;

    &-half {
        @extend %#{$prefix}grid-gap-half;
    }

    &-quart {
        @extend %#{$prefix}grid-gap-quart;
    }

    &-0 {
        @extend %#{$prefix}grid-gap-0;
    }
}

// Checkpoints
//----------------------------------------------------------
// .%grid-[1...n]
// .%tile-[1...n]
// .%col-[1...n]
// .%span-[1...n]
// .%order-[1...n]
//**********************************************************
@for $i from 1 through $grid_column {
    @for $j from 1 through $grid_column {
        #{JX(grid-b#{$i}-#{$j})} {
            @extend %#{$prefix}grid;
        }
    }

    #{JX(grid-#{$i})} {
        @extend %#{$prefix}grid;
        grid-template-columns: repeat($i, 1fr);
    }

    #{JX(col-#{$i})},
    #{JX(grid-#{$i})},
    #{JX(grid-#{$i})} > %#{$prefix}grid-child-fit {
        grid-column-end: span $i;
    }

    #{JX(span-#{$i})} {
        grid-column-start: $i;
    }

    #{JX(order-#{$i})} {
        order: $i;
    }

    //@if not $is_grid_gap {
    #{JX(tile-#{$i})} {
        @extend #{JX(layout, "%")};
        //grid-template-columns: repeat(auto-fit, minmax(GetMinTileWidth($i), 1fr)) !important;
        grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));
    }
    //}
}

// Breakpoints
//----------------------------------------------------------
// .%shrink
// .%grid-b[1...n]-[1...n]
// .%col-b[1...n]-[1...n]
// .%span-b[1...n]-[1...n]
// .%order-b[1...n]-[1...n]
// .%on-b[1...n]
// .%off-b[1...n]
// .%show-b[1...n]
// .%hide-b[1...n]
//**********************************************************
@for $i from $grid_column to 0 {
    @media only screen and (max-width: GetBreakpoint($i)) {
        @include pasteBuffer($i);

        @for $j from 1 through $grid_column {
            %#{$prefix}grid-b#{$i}-#{$j},
            .#{$prefix}grid-b#{$i}-#{$j} {
                grid-template-columns: repeat($j, 1fr);
            }

            %#{$prefix}col-b#{$i}-#{$j},
            .#{$prefix}col-b#{$i}-#{$j},
            %#{$prefix}grid-b#{$i}-#{$j},
            .#{$prefix}grid-b#{$i}-#{$j},
            %#{$prefix}grid-b#{$i}-#{$j} > %#{$prefix}grid-child-fit,
            .#{$prefix}grid-b#{$i}-#{$j} > %#{$prefix}grid-child-fit {
                grid-column-end: span $j;
            }

            %#{$prefix}span-b#{$i}-#{$j},
            .#{$prefix}span-b#{$i}-#{$j} {
                grid-column-start: $j;
            }

            %#{$prefix}order-b#{$i}-#{$j},
            .#{$prefix}order-b#{$i}-#{$j} {
                order: $j;
            }
        }

        // Shrink
        @if $i < $grid_column {
            $k: $i + 1;

            #{JX(shrink)} {
                &,
                > %#{$prefix}grid-shrink-#{$k} {
                    grid-template-columns: repeat($i, 1fr);
                }

                > %#{$prefix}col-shrink-#{$k},
                > %#{$prefix}grid-child-fit {
                    grid-column-end: span $i;
                }
            }

            @for $j from $k through $grid_column {
                #{JX(grid-#{$j})},
                #{JX(grid-b#{$i}-#{$j})} {
                    @extend %#{$prefix}grid-shrink-#{$k};
                }

                #{JX(col-#{$j})},
                #{JX(col-b#{$i}-#{$j})},
                #{JX(grid-#{$j})},
                #{JX(grid-b#{$i}-#{$j})} {
                    @extend %#{$prefix}col-shrink-#{$k};
                }
            }
        }

        #{JX(off-b#{$i})} {
            @include off;
        }

        #{JX(on-b#{$i})} {
            @include on;
        }

        #{JX(hide-b#{$i})} {
            @include hide;
        }

        #{JX(show-b#{$i})} {
            @include show;
        }
    }
}
