//**********************************************************
// Functions
//----------------------------------------------------------
//
//**********************************************************
@use "sass:math";
@use "sass:list";
@use "sass:string";

// Locator
//----------------------------------------------------------
// ".%" or "%." - class & placeholder
// "#"          - id
// "."          - class
// "%"          - placeholder
// ""           - without locator
//**********************************************************
@function JX($selector, $loc: $locator) {
    @if $loc == ".%" or $loc == "%." {
        $list: ();

        @each $value in (".", "%") {
            //@if $value == "%" {
            //    $placeholder: #{$value}#{$prefix}#{$selector};
            //
            //    $list_placeholders: PushPlaceholder($placeholder);
            //}

            $list: list.append($list, #{$value}#{$prefix}#{$selector}, comma);
        }

        @return $list;
    } @else if $loc == "." or $loc == "%" or $loc == "#" or $loc == "" {
        @return #{$loc}#{$prefix}#{$selector};
    }

    @warn "Wrong locator: #{$loc}";
    @return null;
}

// Placeholders
//@function HasPlaceholder($placeholder) {
//    @if list.index($list_placeholders, $placeholder) == null {
//        @return false;
//    }
//
//    @warn "The object already exists: #{$placeholder}";
//    @return true;
//}

//@function PushPlaceholder($placeholder) {
//    @if not HasPlaceholder($placeholder) {
//        @return list.append($list_placeholders, $placeholder);
//    }
//
//    @return null;
//}

// Breakpoints
@function fnGetListBreakpoints($is_evenly: false) {
    $list: ();
    $g: $grid_gap;
    $c: $container_gap * 2;
    $r: $container_rate * $c;
    $f: $container_rate * $g;
    $v: $c;

    @for $i from 1 through $grid_column {
        $w: $i * $grid_cell_width;
        $d: $i - 1;

        @if not $is_evenly {
            $p: math.div($w + $d * $grid_gap + $v, 100);
            $g: $p * $f;
            $c: $p * $r;
        }

        $b: $w + $d * $g + $c;

        @if math.unit($b) == "px" {
            $b: math.round($b) - 1;
        } @else if math.unit($b) == "rem" {
            $b: $b - $px;
        }

        $list: list.append($list, $b);
    }

    @return $list;
}

@function fnGetBreakpoint($n: $grid_column) {
    @return list.nth($list_breakpoints, $n);
}

// Tile
@function GetMinTileWidth($n: $grid_column, $gap: 0) {
    $u: $grid_width - $gap * $n;
    $w: math.div($u, $n + 1);

    @if math.unit($w) == "px" {
        $w: math.round($w) + 1;
    } @else if math.unit($w) == "rem" {
        $w: $w + $px;
    }

    @return $w;
}

// Gaps
@function fnGetGap($value) {
    //@if $value == gap-half or $value == -half or $value == half {
    @if string.index(#{$value}, "half") != null {
        @return math.div($grid_gap, 2);
        //} @else if $value == gap-quart or $value == -quart or $value == quart {
    } @else if string.index(#{$value}, "quart") != null {
        @return math.div($grid_gap, 4);
        //} @else if $value == gap-0 or $value == -0 or $value == 0 {
    } @else if string.index(#{$value}, "0") != null {
        @return 0;
    }

    @return $grid_gap;
}

// Helpers
@function fnStripUnit($value) {
    @return math.div($value, ($value * 0 + 1));
}

@function fnPxToRem($value) {
    @if math.unit($value) == "px" {
        @return $px * fnStripUnit($value);
    }

    @return $value;
}

@function fnRemToPx($value) {
    @if math.unit($value) == "rem" {
        @return math.round($root_unit * fnStripUnit($value));
    }

    @return $value;
}

//@function fnToLayoutUnit($value) {
//    @if math.unit($container_width) == "px" {
//
//    }
//
//    @return $value;
//}
