//**********************************************************
// Mixins
//----------------------------------------------------------
//
//**********************************************************
@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:meta";

@mixin mxAddPlaceholder($selector, $props: null, $loc: "%") {
    @each $sel in $selector {
        #{JX($sel, $loc)} {
            @if meta.type-of($selector) == list {
                @content ($sel);
            } @else {
                @content;
            }

            @if $props != null {
                @if meta.type-of($props) == map {
                    @each $key, $value in $props {
                        #{$key}: $value;
                    }
                }
            }
        }
    }
}

@mixin mxSetGutter($prop, $value) {
    @include mxSetPropsAdaptive(
            (
                $prop: $value
            )
    );

    @each $v in (-half, -quart) {
        &#{$v} {
            @include mxSetPropsAdaptive(
                    (
                        $prop: fnGetGap($v)
                    )
            );
        }
    }

    &-0 {
        #{$prop}: 0;
    }
}

@mixin mxSetPropsAdaptive($props) {
    @each $key, $value in $props {
        @if $value > 0 {
            #{$key}: $value;
        }
    }

    $buffer: ();

    @each $key, $value in $props {
        @if $value > 0 {
            $buffer: map.merge(
                             $buffer,
                             (
                                 $key: 1vw * $container_rate * $value
                             )
                     );
        } @else {
            $buffer: map.merge(
                             $buffer,
                             (
                                 $key: 0
                             )
                     );
        }
    }

    @include mxCopyBuffer(#{&}, $buffer);
}

// Array of breakpoints buffer
//----------------------------------------------------------
// $list_breakpoints_buffer: [
//     (
//         breakpoint: 11,
//         selector: &,
//         props: (
//             padding-left: 1rem,
//             padding-right: 1rem
//         )
//     ),
//     ...
// ]
//**********************************************************
@mixin mxCopyBuffer($selector, $props, $breakpoint: $grid_column) {
    $buffer: (
                 selector: $selector,
                 breakpoint: $breakpoint
             );

    @each $key, $value in $props {
        $buffer: map.merge(
                         $buffer,
                         props,
                         (
                             $key: $value
                         )
                 );
    }

    $list_breakpoints_buffer: list.append($list_breakpoints_buffer, $buffer) !global;
}

@mixin mxPasteBuffer($breakpoint: $grid_column) {
    @each $buffer in $list_breakpoints_buffer {
        @if $breakpoint == map.get($buffer, breakpoint) {
            $selector: map.get($buffer, selector);

            #{$selector} {
                @each $key, $value in map.get($buffer, props) {
                    #{$key}: $value;
                }
            }
        }
    }
}
