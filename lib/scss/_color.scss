@use "sass:meta";
@use "sass:list";
@use "sass:color";

$lightness-mount: 20%;
$list_colors:     primary, secondary, tertiary, quaternary, quinary, info, success, warning, error;

/// ## Colors
//----------------------------------------------------------
// .%bg-[primary, secondary, tertiary, quaternary, quinary, info, success, warning, error]
// .%ink-[primary, ..., error]
// .%border-[primary, ..., error]
//
// Color Schemes
//----------------------------------------------------------
// .%scheme-[primary, secondary, tertiary, quaternary, quinary, info, success, warning, error]
// .%scheme-[primary, ..., error]-dark
// .%scheme-[primary, ..., error]-light
//
// .%scheme-[primary, ..., error]-border
// .%scheme-[primary, ..., error]-border-dark
// .%scheme-[primary, ..., error]-border-light
//
// .%scheme-[primary, ..., error]-state
// .%scheme-[primary, ..., error]-state:[hover, active, visited, target, focus, focus-visible, focus-within]
//----------------------------------------------------------
//
/// ### Examples with primary color:
///
/// ```css
/// .bg-primary,
/// .scheme-primary,
/// .scheme-primary-border,
/// .scheme-primary-state {
///     background-color: #dffddd;
/// }
///
/// .ink-primary,
/// .scheme-primary,
/// .scheme-primary-border,
/// .scheme-primary-state {
///     color: black;
/// }
///
/// .border-primary,
/// .scheme-primary-border,
/// .scheme-primary-state {
///     border-color: orange;
/// }
/// ```
///
/// #### Base schemes:
///
/// ```css
/// .scheme-primary,
/// .scheme-primary-border,
/// .scheme-primary-state {
///     background-color: #dffddd;
///     color:            black;
/// }
///
/// .scheme-primary-dark,
/// .scheme-primary-border-dark {
///     background-color: #dffddd;
///     color:            black;
/// }
///
/// .scheme-primary-light,
/// .scheme-primary-border-light {
///     background-color: #dffddd;
///     color:            black;
/// }
/// ```
///
/// #### Border schemes:
///
/// ```css
/// .scheme-primary-border,
/// .scheme-primary-state {
///     border-color: orange;
/// }
///
/// .scheme-primary-border-dark {
///     border-color: orange;
/// }
///
/// .scheme-primary-border-light {
///     border-color: orange;
/// }
/// ```
///
/// #### State schemes:
///
/// ```css
/// .scheme-primary-state:hover {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:active {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:visited {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:target {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:focus {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:focus-visible {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
///
/// .scheme-primary-state:focus-within {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
/// ```
//**********************************************************

:root {
    @each $key, $value in $color-schemes {
        $color:                     list.nth($value, 1);
        #{JX(color-#{$key}, "--")}: #{$color};

        @if $key != blank {
            @each $theme in (dark, light) {
                #{JX(color-#{$key}-#{$theme}, "--")}: #{
                    color.scale($color, $lightness: if($theme == dark, - $lightness-mount, $lightness-mount))
                };
            }
        }
    }
}

@each $key, $value in $color-schemes {
    $length:     list.length($value);
    $background: list.nth($value, 1);
    $ink:        if($length >= 2 and meta.type-of(list.nth($value, 2)) == color, list.nth($value, 2), color.invert($background));
    $border:     if($length == 3 and meta.type-of(list.nth($value, 3)) == color, list.nth($value, 3), $background);

    #{JX(scheme-#{$key}, ".%")} {
        background-color: $background;
        color:            $ink;

        @each $theme in (dark, light) {
            $mount: if($theme == dark, -$lightness-mount, $lightness-mount);

            &-#{$theme} {
                background-color: color.scale($background, $lightness: $mount);
                color:            color.scale($ink, $lightness: $mount)
            }
        }
    }

    #{JX(scheme-#{$key}-border, ".%")} {
        @extend #{JX(scheme-#{$key}, ".%")};
        border-color: $border;

        @each $theme in (dark, light) {
            $mount: if($theme == dark, -$lightness-mount, $lightness-mount);

            &-#{$theme} {
                @extend #{JX(scheme-#{$key}-#{$theme}, ".%")};
                border-color: color.scale($border, $lightness: $mount);
            }
        }
    }
}

@each $key, $value in $color-scheme-states {
    #{JX(scheme-#{$key}-state, ".%")} {
        @extend #{JX(scheme-#{$key}, ".%")};
        @extend #{JX(scheme-#{$key}-border, ".%")};

        @each $state, $scheme in $value {
            $length: list.length($scheme);

            @if $length > 0 {
                &:#{$state} {
                    @if meta.type-of(list.nth($scheme, 1)) == color {
                        background-color: list.nth($scheme, 1);

                        @if $length > 1 and meta.type-of(list.nth($scheme, 2)) == color {
                            color: list.nth($scheme, 2);

                            @if $length > 2 and meta.type-of(list.nth($scheme, 3)) == color {
                                border-color: list.nth($scheme, 3);
                            }
                        }
                    }
                }
            }
        }
    }
}

//@mixin mxColor($background, $ink, $border: null) {
//    background-color: $background;
//    color:            $ink;
//
//    @if $border {
//        border-color: $border;
//    }
//}
//
//@mixin mxColorState($state, $background, $ink, $border: null) {
//    &:#{$state} {
//        @include mxColor($background, $ink, $border);
//    }
//}
//
//@mixin color-scheme($color) {
//    background-color: $dominant;
//    color:            black;
//}
