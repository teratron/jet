

//$BP: [
//    (
//        selector: &,
//        props: (
//            padding-left: $layout_gap,
//            padding-right: $layout_gap
//        )
//    ),
//    (AA: #{&}),
//];
//
//:root {
//    //--var7: #{$asd};
//}

//:root {
//        //--var7: #{$global_map};
//    }
//@include makePlaceholder(&) {
//    @each $key, $value in $props {
//        @if $value > 0 {
//            #{$key}: $layout_rate * $value;
//        } @else {
//            #{$key}: 0;
//        }
//    }
//}

//@include extendPlaceholder(&);
//@include addPlaceholder(&);
//@extend #{&} !optional;

//@mixin addPlaceholder($name) {
//    //@if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//    //    $name: string.slice(#{$name}, 2);
//    //}
//
//    //@if list.index($breakpoint_placeholders, #{$name}) == null {
//    //    $breakpoint_placeholders: list.append($breakpoint_placeholders, #{$name}) !global;
//    //} @else {
//    //    @warn "Placeholder %#{$name} already exists.";
//    //}
//
//    @if list.index($breakpoint_placeholders, $name) == null {
//        $breakpoint_placeholders: list.append($breakpoint_placeholders, $name) !global;
//    } @else {
//        @warn "Placeholder %#{$name} already exists.";
//    }
//}

//@mixin extendPlaceholder($name) {
//    @if list.index($breakpoint_placeholders, #{$name}) == null {
//        @include addPlaceholder($name);
//    }
//
//    @if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//        $name: string.slice(#{$name}, 2);
//    }
//
//    $selector: selector.parse($name);
//
//    @extend %#{$selector} !optional;
//}

//@mixin makePlaceholder($name) {
//    @if string.index(#{$name}, ".") == 1 or string.index(#{$name}, "%") == 1 or string.index(#{$name}, "#") == 1 {
//        $name: string.slice(#{$name}, 2);
//    }
//
//    $selector: selector.parse($name);
//
//    %#{$selector} {
//        @content;
//    }
//}

//@mixin setPlaceholderBreakpoints($name) {
//    @at-root {
//        @for $i from $grid_column to 0 {
//            @media only screen and (max-width: getBreakpoint($i)) {
//                %#{$name}-breakpoint-#{$i} {
//                    @content;
//                }
//            }
//        }
//    }
//}

/*.#{$prefix}cursor {
    @each $cursor in $list_cursors {
        &-#{$cursor} {
            cursor: $cursor;
        }
    }
}*/

/*@mixin setGapProperty($prop) {
    $dir: top, bottom, left, right;

    %#{$prop} {
        #{$prop}: $grid_gap;

        &-half {
            #{$prop}: $grid_gap_half;
        }

        &-0 {
            #{$prop}: 0;
        }

        &-top {
            #{$prop}-top: $grid_gap;

            &-half {
                #{$prop}-top: $grid_gap_half;
            }

            &-0 {
                #{$prop}-top: 0;
            }
        }

        &-bottom {
            #{$prop}-bottom: $grid_gap;

            &-half {
                #{$prop}-bottom: $grid_gap_half;
            }

            &-0 {
                #{$prop}-bottom: 0;
            }
        }

        &-left {
            #{$prop}-left: $grid_gap;

            &-half {
                #{$prop}-left: $grid_gap_half;
            }

            &-0 {
                #{$prop}-left: 0;
            }
        }

        &-right {
            #{$prop}-right: $grid_gap;

            &-half {
                #{$prop}-right: $grid_gap_half;
            }

            &-0 {
                #{$prop}-right: 0;
            }
        }
    }
}

@include setGapProperty("margin");*/

/*@for $j from 1 through $grid_column {
    %col-#{$j} {
        grid-column-end: span $j;
    }
    .#{$prefix}col-#{$j}-b#{$k} {
        @extend %col-#{$j};
    }
}*/

/*@for $j from 1 through $grid_column {
    .#{$prefix}col-#{$j}-b#{$k} {
        @extend %col-#{$j};
    }
}*/

/*.shrink > .col-12,
.shrink > .grid-12,
.shrink > .grid-12 > .col,
.shrink > .grid-12 > .row {
    grid-column-end: span 11
}

%col-#{$i} {
    grid-column-end: span $k;
}

%grid-#{$i} {
    grid-template-columns: repeat($k, 1fr);
}

.#{$prefix}shrink {
    &,
    > %grid-#{$i} {
        grid-template-columns: repeat($k, 1fr);
    }

    > %col-#{$i},
    > .#{$prefix}grid-#{$i} > .#{$prefix}col,
    > .#{$prefix}grid-#{$i} > .#{$prefix}row {
        grid-column-end: span $k;
    }
}

@for $j from $i through $grid_column {
    .#{$prefix}col-#{$j},
    .#{$prefix}grid-#{$j} {
        @extend %col-#{$i};
        @extend %grid-#{$i};
    }
}

@for $j from 1 through $grid_column {
    .#{$prefix}col-#{$j}-b#{$k} {
        grid-column-end: span $j;
    }
}*/

// Grid
/*.grid-222 {
    display:               grid;
    grid-template-columns: repeat($layout_columns, minmax(0, 1fr));
    grid-auto-columns:     auto;
    grid-auto-rows:        auto;
}*/

/*

.lattice {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 40px;
    grid-auto-rows: 40px;

    width: 100%;
    height: 500px;
}

%grid {
    display: grid;
}

.row {
    @extend %grid;
    grid-auto-flow: column;
    align-items: start;

    >* {
        @extend %grid;
        //outline: 2px solid red;
    }

    >.head {
        justify-items: start;
    }

    >.body {
        justify-items: center;
    }

    >.foot {
        justify-items: end;
    }
}

.col {
    @extend %grid;
    grid-auto-flow: row;

    >* {
        @extend %grid;
    }
}

.bar {
    @extend .row;
    align-items: center;

    >* {
        //@extend %grid;
        align-items: center;
    }
}

.list {
    //@include list;
    @extend .col;
    //grid-auto-rows: max-content;

    > * {
        @extend .bar;
    }
}

// Layout 12 columns
.layout-3-9 {
    @extend %grid;
    grid-template-columns: 3fr 9fr;
}

.layout-4-8 {
    @extend %grid;
    grid-template-columns: 4fr 8fr;
}

.layout-6-6,
.layout-6x2 {
    @extend %grid;
    grid-template-columns: repeat(2, 6fr);
}

.layout-2-8-2 {
    @extend %grid;
    grid-template-columns: 2fr 8fr 2fr;
}

.layout-3-8-3 {
    @extend %grid;
    grid-template-columns: 3fr 6fr 3fr;
}

.layout-4x3 {
    @extend %grid;
    grid-template-columns: repeat(3, 4fr);
}

.layout-3x4 {
    @extend %grid;
    grid-template-columns: repeat(4, 3fr);
}
*/
