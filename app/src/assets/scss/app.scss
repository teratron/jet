@use "sass:meta";
@use "sass:list";
@use "sass:color";

@viewport {
    min-width: 640px;
    max-width: 800px;
}

@viewport {
    zoom:     0.75;
    min-zoom: 0.5;
    max-zoom: 0.9;
}

@viewport {
    orientation: landscape;
}

// Configuration
@import "themes/default/light";
@import "themes/default/dark";
@import "variables";

// Jettix
@import "jettix";
@import "lib/scss/debug";

body {
    @extend %jx-debug-sticker;
}

// Application
#app {
    @extend %jx-app;
    background-color: #cccccc;
    align-content:   stretch;
    align-items:     start;
    justify-content: space-between;
    justify-items:   center;

    //@include %scheme-dominant;
    //@extend %scheme-dominant;
}

// Container
.app-container {
    @extend %jx-container;
    /*@extend %jx-grid-12;*/
}

// Main
.app-main {
    @extend %jx-main;
    background-color: white;

    > .app-container {
        display: grid;
        align-content: start;
        min-height:    $main_height;
    }
}

// Header
.app-header {
    @extend %jx-header;
    background-color: burlywood;
    //position: sticky;
    //top:      0;

    > .app-container {
        min-height: $header_height;
        //align-items: center;
    }
}

// Footer
.app-footer {
    @extend %jx-footer;
    background-color: #b3d4fc;

    > .app-container {
        min-height: $footer_height;
    }
}

// Debug
.outline > * {
    outline: 1px solid #dddddd;
}

.row-test {
    @extend %jx-row, .outline;

    > :first-child {
        @extend %jx-col-b10-3, %jx-col-b9-5, %jx-col-b8-6;
    }
}

//%container {
//    $container_shrink: 20px;
//    $container_expand: calc((100vw - $container_width) * .5 + $container_shrink);
//
//    // больше
//    @media only screen and (min-width: calc($container_width + $px)) {
//        padding-left:  $container_expand;
//        padding-right: $container_expand;
//    }
//
//    // меньше
//    @media only screen and (max-width: $container_width) {
//        overflow-x:    hidden;
//        padding-left:  $container_shrink;
//        padding-right: $container_shrink;
//    }
//}


/// ## Color Schemes
//----------------------------------------------------------
// .%scheme-[dominant, primary, secondary, tertiary, accent, info, success, warning, error]
// .%scheme-[dominant, primary, secondary, tertiary, accent, info, success, warning, error]-dark
// .%scheme-[dominant, primary, secondary, tertiary, accent, info, success, warning, error]-light
// .%scheme-border-[dominant, primary, secondary, tertiary, accent, info, success, warning, error]
// .%scheme-state-[dominant, primary, secondary, tertiary, accent, info, success, warning, error]
//----------------------------------------------------------
/// ### Examples:
///
/// #### Base Scheme:
///
/// ```scss
/// .scheme-dominant {
///     background-color: $dominant;
///     color:            black;
///
///     &-dark {
///         background-color: color.scale($dominant, $lightness: -10%);  // darken
///         color:            black;
///     }
///
///     &-light {
///         background-color: color.scale($dominant, $lightness: 10%);  // lighten
///         color:            black;
///     }
/// }
/// ```
///
/// Compiles to:
///
/// ```css
/// .scheme-dominant {
///     background-color: #dffddd;
///     color:            black;
/// }
///
/// .scheme-dominant-dark {
///     background-color: #dffddd;
///     color:            black;
/// }
///
/// .scheme-dominant-light {
///     background-color: #dffddd;
///     color:            black;
/// }
/// ```
///
/// #### Border Scheme:
///
/// ```scss
/// .scheme-border-dominant {
///     @extend %scheme-dominant;
///     // and/or:
///     // @extend .scheme-dominant;
///     border-color: orange;
/// }
/// ```
///
/// Compiles to:
///
/// ```css
/// .scheme-border-dominant {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
/// ```
///
/// #### States Scheme:
///
/// ```scss
/// .scheme-state-dominant {
///     @extend %scheme-dominant;
///     // and/or:
///     // @extend .scheme-dominant;
///     border-color: orange;
/// }
/// ```
///
/// Compiles to:
///
/// ```css
/// .scheme-border-dominant {
///     background-color: #dffddd;
///     color:            black;
///     border-color:     orange;
/// }
/// ```
//**********************************************************
@mixin color-scheme($bg, $ink) {
    background-color: $bg;
    color:            $ink;
}

@each $key, $value in $color-schemes {
    #{JX(scheme-#{$key}, ".%")} {
        @include color-scheme(list.nth($value, 1), list.nth($value, 2));

        @each $theme in (dark, light) {
            $sign: if($theme == dark, -1, 1);
            &-#{$theme} {
                @include color-scheme(
                        color.scale(list.nth($value, 1), $lightness: 10% * $sign),
                        list.nth($value, 2)
                );
            }
        }
    }

    @if length($value) == 3 and list.nth($value, 3) != null {
        #{JX(scheme-border-#{$key}, ".%")} {
            @extend #{JX(scheme-#{$key}, ".%")};
            border-color: list.nth($value, 3);
        }
    }
}

//
@each $key, $value in $color-scheme-states {
    #{JX(scheme-state-#{$key}, ".%")} {
        @extend #{JX(scheme-#{$key}, ".%")};

        //@if meta{
        @extend #{JX(scheme-border-#{$key}, ".%")};
        //}

        @each $state, $scheme in $value {
            &:#{$state} {
                @include color-scheme(list.nth($scheme, 1), list.nth($scheme, 2));
            }
        }
    }
}

//:root {
//    --jx-scheme-#{$key}-bg:  #{list.nth($value, 1)};
//    --jx-scheme-#{$key}-ink: #{list.nth($value, 2)};
//}

.app-main {
    @extend %jx-scheme-border-error;
    @extend %jx-scheme-state-dominant;
    pointer-events: auto;
}